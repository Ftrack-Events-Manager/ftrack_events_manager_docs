"use strict";(self.webpackChunkftrack_events_manager_docs=self.webpackChunkftrack_events_manager_docs||[]).push([[618],{1410:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-9e65db34",path:"/event-write.html",title:"Ftrack Events Manager 事件编写",lang:"zh-CN",frontmatter:{lang:"zh-CN",title:"Ftrack Events Manager 事件编写"},excerpt:"",headers:[{level:2,title:"函数式事件",slug:"函数式事件",children:[]},{level:2,title:"类式事件",slug:"类式事件",children:[]},{level:2,title:"调试当前文件",slug:"调试当前文件",children:[]},{level:2,title:"调试多个文件",slug:"调试多个文件",children:[]}],filePathRelative:"event-write.md",git:{updatedTime:1630946356e3,contributors:[{name:"liaokongVFX",email:"568250549@qq.com",commits:1}]}}},1258:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var e=a(6252);const t=(0,e.uE)('<h1 id="事件路径配置" tabindex="-1"><a class="header-anchor" href="#事件路径配置" aria-hidden="true">#</a> 事件路径配置</h1><p>事件路径配置在<code>ftrack_events_manager_helper.config</code>中，只需要配置<code>EVENTS_ROOTS</code>这个变量即可。</p><h1 id="编写事件" tabindex="-1"><a class="header-anchor" href="#编写事件" aria-hidden="true">#</a> 编写事件</h1><p>事件可以分类函数式和类式，写完后只需要用<code>ftrack_events_manager_helper.subscribe</code>装饰一下即可。</p><p><code>subscribe</code>装饰器有3个参数：</p><ol><li>topic: 订阅项，默认为 <code>ftrack.update</code></li><li>subscriber: 订阅的信息</li><li>priority: 优先级，默认为 100</li></ol><h2 id="函数式事件" tabindex="-1"><a class="header-anchor" href="#函数式事件" aria-hidden="true">#</a> 函数式事件</h2><p>事件函数会接收两个参数，<code>session</code> 和 <code>event</code>。</p><p>同时，<code>ftrack_events_helper</code>下还提供了<code>logger</code>对象用于打印消息，并且消息会记录到数据库中，用于前端查看。</p><p><code>logger</code>提供了：<code>info</code>/<code>warning</code>/<code>error</code>/<code>exception</code>四个方法可以使用</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> ftrack_events_helper <span class="token keyword">import</span> subscribe<span class="token punctuation">,</span> logger\n\n<span class="token decorator annotation punctuation">@subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;这是test1的log&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="类式事件" tabindex="-1"><a class="header-anchor" href="#类式事件" aria-hidden="true">#</a> 类式事件</h2><p>类式事件需要继承<code>ftrack_events_helper.EventBase</code>这个类，这个类提供了内置的<code>logger</code>对象</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> ftrack_events_helper <span class="token keyword">import</span> EventBase<span class="token punctuation">,</span> subscribe\n\n<span class="token decorator annotation punctuation">@subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Test7</span><span class="token punctuation">(</span>EventBase<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    event_name <span class="token operator">=</span> <span class="token string">&#39;事件名&#39;</span>  <span class="token comment"># 这个类变量可以指定事件名，如果不指定，事件名为类名</span>\n    \n    <span class="token comment"># 事件入口，需要提供 event 参数</span>\n    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>session<span class="token punctuation">)</span>  <span class="token comment"># self.session 就是 ftrack 的 session 对象</span>\n        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">&#39;这是事件名的log&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 内置了 self.logger 日志输出对象</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h1 id="调试事件" tabindex="-1"><a class="header-anchor" href="#调试事件" aria-hidden="true">#</a> 调试事件</h1><h2 id="调试当前文件" tabindex="-1"><a class="header-anchor" href="#调试当前文件" aria-hidden="true">#</a> 调试当前文件</h2><p>只需要使用<code>ftrack_events_helper.run_test_server</code>函数即可</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> ftrack_events_helper <span class="token keyword">import</span> subscribe<span class="token punctuation">,</span> logger<span class="token punctuation">,</span> run_test_server\n\n<span class="token decorator annotation punctuation">@subscribe</span><span class="token punctuation">(</span>priority<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span>\n<span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;这是test1的log&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n    run_test_server<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="调试多个文件" tabindex="-1"><a class="header-anchor" href="#调试多个文件" aria-hidden="true">#</a> 调试多个文件</h2><p>只需要在需要运行的文件中设置<code>DEBUG=True</code>,然后运行<code>ftrack_events_helper.events_test_server.py</code>文件即可。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如果所有文件都不设置<code>DEBUG=True</code>,那么<code>ftrack_events_helper.events_test_server.py</code>会加载所有事件。</p></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> ftrack_events_helper <span class="token keyword">import</span> subscribe<span class="token punctuation">,</span> logger<span class="token punctuation">,</span> run_test_server\n\nDEBUG <span class="token operator">=</span> <span class="token boolean">True</span>\n\n\n<span class="token decorator annotation punctuation">@subscribe</span><span class="token punctuation">(</span>priority<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span>\n<span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;这是test1的log&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n    run_test_server<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h1 id="事件范例" tabindex="-1"><a class="header-anchor" href="#事件范例" aria-hidden="true">#</a> 事件范例</h1>',23),p={href:"https://github.com/Ftrack-Events-Manager/ftrack_events_examples",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("https://github.com/Ftrack-Events-Manager/ftrack_events_examples"),c={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[(0,e._)("a",p,[o,(0,e.Wm)(a)])])],64)}}}}]);